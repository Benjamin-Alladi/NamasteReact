created namaste-react
created index.html, App.js

*
npm init => Initialiase npm. It creates package.json
npm install react
npm install react-dom
npm install -D parcel => Installing "parcel" as a DevDependency. It is a bundler similar to WebPack, Vite.

*
In App.js, import React from "react" and import ReactDOM from "react-dom"
Now create ReactElement which is a Javascript object.  React.createElement(HTMLTag, Object of Attributes, Array of Children).
Now create root using ReactDOM.createRoot(document.getElementById("root")).
root.render(ReactElement).

Now load this script into index.html using "script" tag (type="module").

To run the application in Development Mode => npx parcel index.html;  (Here, We are making index.html as entrypoint. So, remove main:"index.js" from package.json).
To run the application in Production Mode => npx parcel build index.html;
Production Mode is faster than Development Mode.


Now Add this to "scripts" in package.json:
"start": "parcel index.html",
"build": "parcel build index.html",

Run the application in Development Mode => npm run start.
Run the application in Production Mode => npm run build.



*** JSX(JavaScript XML): 
JSX is XML,HTML like markup language.
JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file.

<h1 className="heading" id="hd>This is a heading</h1? === React.createElement("h1", {className="heading", id:"hd"}, "This is a heading");
JSX === ReactElement(JS object);

BABEL is a javascript compiler and it compiles JSX into ReactElements(objects) so that JS-Engine can understand.



***Components: 
Small Piece/Part of UI which has its own logic and appearence.
A component is a Javascript function that returns JSX.

Rendering a Component: {ComponentName()} or <ComponentName/> or <ComponentName> </ComponentName>.

If a component is nested inside another component, it is called "Component Composition".
Ex:
<Component1>
    <Component2/>


</Component1>


***Parcel: https://parceljs.org/

Dev Build
Local Server
HMR = Hot Module Replacement
File Watching Algorithm - written in C++
Caching - Faster Builds
Image Optimization
Minification
Bundling
Compress
Consistent Hashing
Code Splitting
Differential Bundling - support older browsers
Diagnostic
Error Handling
HTTPs
Tree Shaking - remove unused code
Different dev and prod bundles

*** Routing, useContext, Redux, lazy loading, suspense.



*** Higher-order components (HOCs): These are PURE FUNCTIONS (For same input, same output and they do not modify the input).
These are a powerful feature of the React library. They allow you to reuse component logic across multiple components.

In React, a higher-order component is a function that takes a component as an argument and returns a new component that wraps the original component.

HOCs allow you to add additional functionality to a component without modifying the component's code. For example, you can use a HOC to add authentication or routing capabilities to a component or to apply a specific style or behavior to multiple components.

HOCs can take additional arguments, which lets you customize the behavior of the HOC. This makes them a flexible and reusable way to add functionality to your components.

Benefits of Using Higher-Order Components in React
1. Reusability: HOCs allow you to reuse component logic across multiple components, which can save time and reduce code duplication.
2. Flexibility: HOCs can take additional arguments, which allows you to customize the behavior of the HOC. This makes them a flexible way to add functionality to your components.
3. Separation of concerns: HOCs can help separate concerns in your code by encapsulating certain functionality in a separate component. This can make the code easier to read and maintain.
4. Composition: HOCs can be composed together to create more complex functionality. This allows you to build up functionality from smaller, reusable pieces.
Higher-order components can be used to implement cross-cutting concerns in your application such as authentication, error handling, logging, performance tracking, and many other features.

export function LabelledCard({RestaurantCard})
{
    const function PromotedRestaurantCard(props)
    {
        return (
            <div>
                <label>Promoted</label>
                <RestaurantCard {...props}/>
            </div>
        );
    }
    return LabelledCard;
}

const PromotedCard=LabelledCard(RestaurantCard);

PromotedRestaurantCard is a HOC and a Pure Function.
It takes a component(RestaurantCard) as an argument and returns a new component(LabelledCard) that wraps the original component.

export function getLabelledCard(Card)
{
    return (props)=>{
        return(
            
            <div>
                <label htmlFor="">Promoted</label>
                <Card {...props}/>
            </div>

        );
    }
}

const PromotedCard= getLabelledCard(Card);